# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wfXBJ84yd1I0MTlA0Vh_O9qJTSObcblH
"""

!pip install tensorflow==2.1.0

!pip install keras==2.3.1

!pip install h5py==2.10.0

import tensorflow as tf
print('版本:',tf.__version__)
import keras
print('版本:',keras.__version__)

import h5py
print('版本:',h5py.__version__)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import cv2,glob
import matplotlib.pyplot as plt
# %matplotlib inline

x_real = np.load('/content/x_real_fp.npz')['data']
y_real = np.load('/content/y_real_fp.npy')
x_easy = np.load('/content/x_easy_fp.npz')['data']
y_easy = np.load('/content/y_easy_fp.npy')
x_medium = np.load('/content/x_medium_fp.npz')['data']
y_medium = np.load('/content/y_medium_fp.npy')
x_hard = np.load('/content/x_hard_fp.npz')['data']
y_hard = np.load('/content/y_hard_fp.npy')

print(x_real.shape,y_real.shape)
print(x_easy.shape,y_easy.shape)
print(x_medium.shape,y_medium.shape)
print(x_hard.shape,y_hard.shape)

from sklearn.model_selection import train_test_split

x_all_data = np.concatenate([x_easy, x_medium, x_hard], axis=0)
label_all_data = np.concatenate([y_easy, y_medium, y_hard], axis=0)
print(x_all_data.shape, label_all_data.shape)
permutation = list(np.random.permutation(x_all_data.shape[0])) # permutation 隨機排
x_data = x_all_data[permutation][:6000]
label_data = label_all_data[permutation][:6000]
x_train, x_val, label_train, label_val = train_test_split(x_data, label_data, test_size=0.2)
print(x_data.shape, label_data.shape) 
print(x_train.shape, label_train.shape) # 訓練
print(x_val.shape, label_val.shape) # 驗證

permutation = list(np.random.permutation(x_real.shape[0])) # permutation 隨機排列
x_test = x_real[permutation][:1200]
label_test = y_real[permutation][:1200]
print(x_test.shape, label_test.shape) # 測試

from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D
from tensorflow.keras.utils import to_categorical
from PIL import Image

rs_model = ResNet50(include_top=False, weights="imagenet",input_shape=(120,120,3))

#train data

print('調整X_train的圖片尺寸...')
x_train_new = np.array([np.asarray(Image.fromarray(x_train[i]).resize((120, 120))) 
                        for i in range(0, len(x_train))])
x_train_new = x_train_new.astype('float32')

print(x_train_new.shape)

#訓練資料前處理
train_input=preprocess_input(x_train_new)
print('使用 RasNet50 模型預測訓練資料的特徵資料...')
train_features = rs_model.predict(train_input,verbose=1)

print(train_features.shape)

#val_data

print('調整X_val的圖片尺寸...')
x_val_new = np.array([np.asarray(Image.fromarray(x_val[i]).resize((120, 120))) 
for i in range(0, len(x_val))])
x_val_new = x_val_new.astype('float32')
print(x_val_new.shape)

#驗證資料前處理

val_input=preprocess_input(x_val_new)
print('使用 RasNet50 模型預測驗證資料的特徵資料...')
val_features = rs_model.predict(val_input,verbose=1)

print(val_features.shape)

#test data

print('調整x_test的圖片尺寸...')
x_test_new = np.array([np.asarray(Image.fromarray(x_test[i]).resize((120, 120))) 
for i in range(0, len(x_test))])
x_test_new = x_test_new.astype('float32')
print(x_test_new.shape)

#測測試資料前處理

test_input=preprocess_input(x_test_new)
print('使用 RasNet50 模型預測測試資料的特徵資料...')
test_features = rs_model.predict(test_input,verbose=1)

print(test_features.shape)

#標籤正規化

print('訓練資料:')
id_label_train = to_categorical(label_train[:,0]-1)
print('身分',id_label_train.shape)
gender_label_train = to_categorical(label_train[:,1])
print('性別',gender_label_train.shape)
LRhand_label_train = to_categorical(label_train[:,2])
print('左右手',LRhand_label_train.shape)
finger_label_train = to_categorical(label_train[:,3])
print('指頭',finger_label_train.shape)

print('驗證 :')
id_label_val = to_categorical(label_val[:,0]-1)
print('身分',id_label_val.shape)
gender_label_val = to_categorical(label_val[:,1])
print('性別',gender_label_val.shape)
LRhand_label_val = to_categorical(label_val[:,2])
print('左右手',LRhand_label_val.shape)
finger_label_val = to_categorical(label_val[:,3])
print('指頭',finger_label_val.shape)

print('測試資料:')
id_label_test = to_categorical(label_test[:,0]-1)
print('身分',id_label_test.shape)
gender_label_test = to_categorical(label_test[:,1])
print('性別',gender_label_test.shape)
LRhand_label_test = to_categorical(label_test[:,2])
print('左右手',LRhand_label_test.shape)
finger_label_test = to_categorical(label_test[:,3])
print('指頭',finger_label_test.shape)

#id model

model = Sequential()
model.add(GlobalAveragePooling2D(input_shape=train_features.shape[1:]))
model.add(Dropout(0.5))
model.add(Dense(600, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])

history = model.fit(train_features,id_label_train, validation_data=(val_features, id_label_val),
                    epochs=100, batch_size=32, verbose=2)

print("\nTesting...")
loss, accuracy = model.evaluate(test_features,id_label_test,verbose=1)
print("測試資料集準確度 = {:.2f}".format(accuracy))

model.summary()

model.save('/content/resnet50_fpAll_id.h5')

# 顯示訓練和測試損失
loss = history.history['loss']
epochs = range(1, len(loss) + 1)
val_loss = history.history['val_loss']
plt.plot(epochs, loss, 'b-', label='Training Loss')
plt.plot(epochs, val_loss, 'r--', label='Validation Loss')
plt.title('Id - Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

acc = history.history['accuracy']
epochs = range(1, len(acc) + 1)
val_acc = history.history['val_accuracy']
plt.plot(epochs, acc, 'b-', label='Training acc')
plt.plot(epochs, val_loss, 'r--', label='Validation acc')
plt.title('Id - Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

#gender model
model_g = Sequential()
model_g.add(GlobalAveragePooling2D(input_shape=train_features.shape[1:]))
model_g.add(Dropout(0.5))
model_g.add(Dense(2, activation='softmax'))

model_g.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])

history_g = model_g.fit(train_features,gender_label_train, validation_data=(val_features, gender_label_val),
                    epochs=100, batch_size=32, verbose=2)
print("\nTesting...")
loss, accuracy = model_g.evaluate(test_features,gender_label_test,verbose=1)
print("測試資料集準確度 = {:.2f}".format(accuracy))

model_g.save('/content/resnet50_fpAll_gneder.h5')

# 顯示訓練和測試損失
loss = history_g.history['loss']
epochs = range(1, len(loss) + 1)
val_loss = history_g.history['val_loss']
plt.plot(epochs, loss, 'b-', label='Training Loss')
plt.plot(epochs, val_loss, 'r--', label='Validation Loss')
plt.title('Gender - Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

acc = history_g.history['accuracy']
epochs = range(1, len(acc) + 1)
val_acc = history_g.history['val_accuracy']
plt.plot(epochs, acc, 'b-', label='Training acc')
plt.plot(epochs, val_loss, 'r--', label='Validation acc')
plt.title('Gender - Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

#LRhand model
model_LR = Sequential()
model_LR.add(GlobalAveragePooling2D(input_shape=train_features.shape[1:]))
model_LR.add(Dropout(0.5))
model_LR.add(Dense(2, activation='softmax'))

model_LR.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])

history_LR = model_LR.fit(train_features,LRhand_label_train, validation_data=(val_features, LRhand_label_val),
                    epochs=100, batch_size=32, verbose=2)
print("\nTesting...")
loss, accuracy = model_LR.evaluate(test_features,LRhand_label_test,verbose=1)
print("測試資料集準確度 = {:.2f}".format(accuracy))

model_LR.save('/content/resnet50_fpAll_LR.h5')

# 顯示訓練和測試損失
loss = history_LR.history['loss']
epochs = range(1, len(loss) + 1)
val_loss = history_LR.history['val_loss']
plt.plot(epochs, loss, 'b-', label='Training Loss')
plt.plot(epochs, val_loss, 'r--', label='Validation Loss')
plt.title('Righthand/Lefthand - Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

acc = history_LR.history['accuracy']
epochs = range(1, len(acc) + 1)
val_acc = history_LR.history['val_accuracy']
plt.plot(epochs, acc, 'b-', label='Training acc')
plt.plot(epochs, val_loss, 'r--', label='Validation acc')
plt.title('Righthand/Lefthand - Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

#finger model
model_f = Sequential()
model_f.add(GlobalAveragePooling2D(input_shape=train_features.shape[1:]))
model_f.add(Dropout(0.5))
model_f.add(Dense(5, activation='softmax'))

model_f.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])

history_f = model_f.fit(train_features,finger_label_train, validation_data=(val_features, finger_label_val),
                    epochs=100, batch_size=32, verbose=2)
print("\nTesting...")
loss, accuracy = model_f.evaluate(test_features,finger_label_test,verbose=1)
print("測試資料集準確度 = {:.2f}".format(accuracy))

model_f.save('/content/resnet50_fpAll_finger.h5')

# 顯示訓練和測試損失
loss = history_f.history['loss']
epochs = range(1, len(loss) + 1)
val_loss = history_f.history['val_loss']
plt.plot(epochs, loss, 'b-', label='Training Loss')
plt.plot(epochs, val_loss, 'r--', label='Validation Loss')
plt.title('Fingers - Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

acc = history_f.history['accuracy']
epochs = range(1, len(acc) + 1)
val_acc = history_f.history['val_accuracy']
plt.plot(epochs, acc, 'b-', label='Training acc')
plt.plot(epochs, val_loss, 'r--', label='Validation acc')
plt.title('Fingers - Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()